pipeline {
  agent {
    node {
      label 'nodejs'
    }

  }
  stages {
    stage('拉取源代码') {
      steps {
        git(url: 'http://xxxx/xxxx/xxxx.git', credentialsId: 'git-id', branch: 'master', changelog: true, poll: false)
        sh '''cat > Dockerfile <<EOF
FROM nginx:latest
RUN mkdir /home/html
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
COPY demo.conf /etc/nginx/conf.d/demo.conf
COPY dist/  /home/html/
EXPOSE 80

EOF
'''
        sh '''cat > demo.yml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-h5-frontend-prod
  namespace: demo
  labels:
    app: demo-h5-frontend-prod
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: demo-h5-frontend-prod
  template:
    metadata:
      labels:
        app: demo-h5-frontend-prod
    spec:
      containers:
        - name: demo-h5-frontend-prod
          image: $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:PROD-$BUILD_NUMBER
          ports:
            - containerPort: 80

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: demo-h5-frontend-prod
  name: demo-h5-frontend-prod-svc
  namespace: demo
spec:
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30110
  selector:
    app: demo-h5-frontend-prod
  type: NodePort

EOF
'''
      }
    }
    stage('构建并推送镜像') {
      steps {
        container('nodejs') {
          sh 'npm install'
          sh 'npm  run release'
          sh '''cat >demo.conf<<EOF

server {
   listen       80 default_server;
   server_name  _;
   gzip on;
   gzip_min_length  5k;
   gzip_buffers     4 16k;
   gzip_http_version 1.0;
   gzip_comp_level 3;
   gzip_types     image/jpeg image/gif image/png image/ico text/plain application/x-javascript text/css text/javascript application/apk  application/json;
   gzip_vary on;
   gzip_disable "MSIE [1-6].";
   charset utf-8;

   location / {
        root /home/html/;
        index  index.html index.htm;
        try_files \\$uri \\$uri/ /index.html;
   }


   location ~* ^/(v1) {
            rewrite ^/v1/(.+?)$ /\\$1 break; 
            proxy_pass       http://demo-app-backend-prod-svc.demo:8080;
            proxy_set_header Host      \\$host;
            proxy_set_header X-Real-IP \\$remote_addr;
            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;

   }
  location ~* ^/(v2) {
        rewrite ^/v2/(.+?)$ /\\$1 break; 
        proxy_pass       http://demo-app-backend-prod-svc.demo:8080;
        proxy_set_header Host \\$host;
        proxy_set_header X-Real-IP \\$remote_addr;
        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;
        proxy_redirect default;
        proxy_set_header Upgrade "websocket";
        proxy_set_header Connection "Upgrade";
        proxy_http_version 1.1;
        proxy_read_timeout 1200s;               
   }

   location ~ \\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css|woff|woff2|eot|otf|svg|ttf|psd|jade|less|scss|json|xls|xlsx)$ {
      root /home/html/;
   }

}

EOF'''
          sh 'docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:PROD-$BUILD_NUMBER .'
          withCredentials([usernamePassword(credentialsId : 'registry-id' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
            sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:PROD-$BUILD_NUMBER'
          }

        }

      }
    }
    stage('发布到PROD环境') {
      steps {
        kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'kubeconfig-id', configs: 'demo.yml')
      }
    }
  }
}
