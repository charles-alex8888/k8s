pipeline {
  agent {
    node {
      label 'maven'
    }

  }
  stages {
    stage('拉取源代码') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: 'master']], doGenerateSubmoduleConfigurations: false, extensions: [[
                                                        $class: 'SubmoduleOption',
                                                        disableSubmodules: false,
                                                        parentCredentials: true,
                                                        recursiveSubmodules: true,
                                                        reference: '',
                                                        trackingSubmodules: false
                                                      ]],
                                                      submoduleCfg: [],
                                                      userRemoteConfigs: [[credentialsId: 'git-id', url: 'http://xxx/xxx.git']]])
          sh '''cat > xxxxx.yml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-prod
  namespace: java
  labels:
    app: backend-prod
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend-prod
  template:
    metadata:
      labels:
        app: backend-prod
    spec:
      imagePullSecrets:
        - name: images-registry-id
      initContainers:
        - name: sky-agent
          image: image-registry-registry-vpc.cn-hongkong.cr.aliyuncs.com/ns/sky-agent:8.4
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c", "cp -r /agent /sidcar"]
          volumeMounts:
            - mountPath: /sidcar
              name: sidcar
      containers:
        - name: backend-prod
          image: $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:PROD-$BUILD_NUMBER
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            tcpSocket:
              port: http
          livenessProbe:
            periodSeconds: 60
            httpGet:
              port: http
              path: /api/healthcheck
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: "300m"
              memory: "1024Mi"
            limits:
              cpu: "700m"
              memory: "4096Mi"
          env:
            - name: JAVA_AGENT
              value: "-javaagent:/sidcar/agent/skywalking-agent.jar=agent.service_name=$APP_NAME,collector.backend_service=skywalking-oap.skywalking.svc:11800"
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: db-name
                  key: MYSQL_DATABASE
            - name: MYSQL_HOST
              valueFrom:
                secretKeyRef:
                  name: db-name
                  key: MYSQL_HOST
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-name
                  key: MYSQL_PASSWORD
            - name: MYSQL_PORT
              valueFrom:
                secretKeyRef:
                  name: db-name
                  key: MYSQL_PORT
            - name: MYSQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-name
                  key: MYSQL_USERNAME
            - name: MARIADB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: uiddb-name
                  key: MARIADB_DATABASE
            - name: MARIADB_HOST
              valueFrom:
                secretKeyRef:
                  name: uiddb-name
                  key: MARIADB_HOST
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: uiddb-name
                  key: MARIADB_PASSWORD
            - name: MARIADB_PORT
              valueFrom:
                secretKeyRef:
                  name: uiddb-name
                  key: MARIADB_PORT
            - name: MARIADB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: uiddb-name
                  key: MARIADB_USERNAME
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_HOST
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PASSWORD
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PORT
            - name: NAMESPACE
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: NAMESPACE
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: PASSWORD
            - name: REGISTER_HOST
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: REGISTER_HOST
            - name: REGISTER_PORT
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: REGISTER_PORT
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: USERNAME
          volumeMounts:
            - mountPath: /sidcar
              name: sidcar
      volumes:
        - name: sidcar
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: backend-prod
  name: backend-prod-svc
  namespace: java
spec:
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30104
  selector:
    app: backend-prod
  type: NodePort

EOF
'''
          sh '''cat > business/Dockerfile <<'EOF'

FROM openjdk:8-jdk-alpine
VOLUME /tmp
ADD business/business-server/target/*.jar app.jar
ENV JAVA_OPTS="-Xms256m"
ENV TZ=Asia/Shanghai
ENV JAVA_AGENT=""
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom $JAVA_AGENT -jar /app.jar" ]
EXPOSE 8080
EOF
'''
        }
      }
      stage('构建并推送镜像') {
        steps {
          container('maven') {
            sh 'mvn clean package -Dmaven.test.skip=true -e'
            sh 'docker build -f business/Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:PROD-$BUILD_NUMBER .'
              withCredentials([usernamePassword(credentialsId : 'registry-id' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
            sh 'echo $DOCKER_PASSWORD'
            sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
              sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:PROD-$BUILD_NUMBER'
            }

          }

        }
      }
      stage('发布到PROD环境') {
        steps {
          kubernetesDeploy(enableConfigSubstitution: true, deleteResource: false, kubeconfigId: 'kubeconfig-id', configs: 'business/business.yml')
        }
      }
    }
    post {
        //任务失败执行
        failure {
          sh "wget --post-data 'content=business 流水线执行失败' 
          xxxx"
        }
        //任务成功后执行
        success {
          sh "wget --post-data 'content=business 流水线执行完成' xxxxx"
        }    
    }
  }
